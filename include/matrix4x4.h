#pragma once

#include "matrix2x2.h"
#include "matrix3x3.h"

namespace aleph0
{

class Matrix4x4
{
public:
	///////////////////////////////////////////////////////////////////////////////
	Matrix4x4();

	///////////////////////////////////////////////////////////////////////////////
	Matrix4x4(const Matrix4x4& other);

	///////////////////////////////////////////////////////////////////////////////
	Matrix4x4(const float elements[16]);

	///////////////////////////////////////////////////////////////////////////////
	Matrix4x4(const Matrix2x2& M_11, const Matrix2x2& M_12, const Matrix2x2& M_21, const Matrix2x2& M_22);

public:
	///////////////////////////////////////////////////////////////////////////////
	Matrix4x4& SetZeroMatrix();

	///////////////////////////////////////////////////////////////////////////////
	Matrix4x4& SetIdentityMatrix();

	///////////////////////////////////////////////////////////////////////////////
	const float& operator()(const int row_index, const int col_index) const;

	///////////////////////////////////////////////////////////////////////////////
	float& operator()(const int row_index, const int col_index);

	///////////////////////////////////////////////////////////////////////////////
	const float& operator()(const int index) const;

	///////////////////////////////////////////////////////////////////////////////
	float& operator()(const int index);

	///////////////////////////////////////////////////////////////////////////////
	Matrix4x4& operator=(const Matrix4x4& other);

	///////////////////////////////////////////////////////////////////////////////
	Matrix4x4 operator+(const Matrix4x4& other) const;

	///////////////////////////////////////////////////////////////////////////////
	Matrix4x4& operator+=(const Matrix4x4& other);

	///////////////////////////////////////////////////////////////////////////////
	Matrix4x4 operator-(const Matrix4x4& other) const;

	///////////////////////////////////////////////////////////////////////////////
	Matrix4x4& operator-=(const Matrix4x4& other);

	///////////////////////////////////////////////////////////////////////////////
	Matrix4x4 operator*(const float scalar) const;

	///////////////////////////////////////////////////////////////////////////////
	Matrix4x4& operator*=(const float scalar);
	
	///////////////////////////////////////////////////////////////////////////////
	Matrix4x4 operator*(const Matrix4x4& other) const;

	///////////////////////////////////////////////////////////////////////////////
	Matrix4x4& operator*=(const Matrix4x4& other);

	///////////////////////////////////////////////////////////////////////////////
	bool operator==(const Matrix4x4& other) const;

	///////////////////////////////////////////////////////////////////////////////
	bool operator!=(const Matrix4x4& other) const;

	///////////////////////////////////////////////////////////////////////////////
	bool IsApproximatelyEqual(const Matrix4x4& other, const float epsilon = aleph0::epsilon) const;

	///////////////////////////////////////////////////////////////////////////////
	static Matrix4x4 NaiveMatrixProduct(const Matrix4x4& A, const Matrix4x4& B);

	///////////////////////////////////////////////////////////////////////////////
	static Matrix4x4 StrassenMatrixProduct(const Matrix4x4& A, const Matrix4x4& B);

	//////////////////////////////////////////////////////////////////////////////
	float Trace() const;

	///////////////////////////////////////////////////////////////////////////////
	float Determinant() const;

	///////////////////////////////////////////////////////////////////////////////
	Matrix4x4& Transpose();

	///////////////////////////////////////////////////////////////////////////////
	Matrix4x4 Transposed() const;

	///////////////////////////////////////////////////////////////////////////////
	Matrix4x4& Invert();

	///////////////////////////////////////////////////////////////////////////////
	Matrix4x4 Inverse() const;

	///////////////////////////////////////////////////////////////////////////////
	Matrix3x3 Submatrix(int skip_row_index, int skip_col_index) const;

	///////////////////////////////////////////////////////////////////////////////
	std::string ToString() const;

private:
	///////////////////////////////////////////////////////////////////////////////
	const float& m(const int row_index, const int col_index) const;

	///////////////////////////////////////////////////////////////////////////////
	float& m(const int row_index, const int col_index);

private:
	///////////////////////////////////////////////////////////////////////////////
	union Data
	{
		Data()
		{
			memset(elements_, 0, 16 * sizeof(float));
		}

		// We can represent our 4x4 matrix in a number of ways:

		// 1) An array of sixteen floats.
		float elements_[16];

		// 2) As a 4x4 array of floats.
		float array_[4][4];
	};

	Data data_;
}; // class Matrix4x4

///////////////////////////////////////////////////////////////////////////////
Matrix4x4 operator*(const float scalar, const Matrix4x4& matrix);

} // namespace aleph0
