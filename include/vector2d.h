#pragma once

#include "aleph0.h"

namespace aleph0
{

class Vector2d
{
public:
	///////////////////////////////////////////////////////////////////////////////
	Vector2d();

	///////////////////////////////////////////////////////////////////////////////
	Vector2d(float x, float y);

	///////////////////////////////////////////////////////////////////////////////
	Vector2d(const Vector2d& other);

public:
	///////////////////////////////////////////////////////////////////////////////
	const float& operator()(const int index) const;

	///////////////////////////////////////////////////////////////////////////////
	float& operator()(const int index);

	///////////////////////////////////////////////////////////////////////////////
	Vector2d operator+(const Vector2d& other) const;

	///////////////////////////////////////////////////////////////////////////////
	Vector2d& operator+=(const Vector2d& other);

	///////////////////////////////////////////////////////////////////////////////
	Vector2d operator-(const Vector2d& other) const;

	///////////////////////////////////////////////////////////////////////////////
	Vector2d& operator-=(const Vector2d& other);

	///////////////////////////////////////////////////////////////////////////////
	Vector2d operator*(const float scalar) const;

	///////////////////////////////////////////////////////////////////////////////
	Vector2d& operator*=(const float scalar);

	///////////////////////////////////////////////////////////////////////////////
	bool operator==(const Vector2d& other) const;

	///////////////////////////////////////////////////////////////////////////////
	bool operator!=(const Vector2d& other) const;

	///////////////////////////////////////////////////////////////////////////////
	float ScalarProduct(const Vector2d& other) const;

	///////////////////////////////////////////////////////////////////////////////
	float GetNorm() const;

	///////////////////////////////////////////////////////////////////////////////
	float GetNormSq() const;

	///////////////////////////////////////////////////////////////////////////////
	Vector2d& Normalize();

	///////////////////////////////////////////////////////////////////////////////
	Vector2d GetNormalized() const;

	///////////////////////////////////////////////////////////////////////////////
	bool IsZero() const;

	///////////////////////////////////////////////////////////////////////////////
	bool IsOrthogonalTo(const Vector2d& other) const;

	///////////////////////////////////////////////////////////////////////////////
	bool IsCollinearTo(const Vector2d& other) const;

	///////////////////////////////////////////////////////////////////////////////
	std::string ToString() const;

private:
	float coordinates_[2];
}; // class Vector2d

///////////////////////////////////////////////////////////////////////////////
Vector2d operator*(const float scalar, const Vector2d& vector);

} // namespace aleph0
