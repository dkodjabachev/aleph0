#pragma once

namespace aleph0
{

class Vector3d;

class Quaternion
{
public:
	///////////////////////////////////////////////////////////////////////////////
	Quaternion();

	///////////////////////////////////////////////////////////////////////////////
	Quaternion(float w_, float x_, float y_, float z);

	///////////////////////////////////////////////////////////////////////////////
	Quaternion(const Quaternion& other);

public:
	///////////////////////////////////////////////////////////////////////////////
	Quaternion& SetRotationAroundAxis(const Vector3d& axis, const float theta);

	///////////////////////////////////////////////////////////////////////////////
	Quaternion operator+(const Quaternion& other) const;

	///////////////////////////////////////////////////////////////////////////////
	Quaternion& operator+=(const Quaternion& other);

	///////////////////////////////////////////////////////////////////////////////
	Quaternion operator-(const Quaternion& other) const;

	///////////////////////////////////////////////////////////////////////////////
	Quaternion& operator-=(const Quaternion& other);

	///////////////////////////////////////////////////////////////////////////////
	Quaternion operator*(const Quaternion& other) const;

	///////////////////////////////////////////////////////////////////////////////
	Quaternion& operator*=(const Quaternion& other);
	
	///////////////////////////////////////////////////////////////////////////////
	Quaternion operator*(const float scalar) const;

	///////////////////////////////////////////////////////////////////////////////
	Quaternion& operator*=(const float scalar);

	///////////////////////////////////////////////////////////////////////////////
	Quaternion GetConjugate() const;

	///////////////////////////////////////////////////////////////////////////////
	float GetNorm() const;
	
	///////////////////////////////////////////////////////////////////////////////
	float GetNormSq() const;

	///////////////////////////////////////////////////////////////////////////////
	Quaternion& Normalize();

	///////////////////////////////////////////////////////////////////////////////
	Quaternion GetNormalized() const;

	///////////////////////////////////////////////////////////////////////////////
	Quaternion GetInverse() const;

private:
	float w;
	float x;
	float y;
	float z;
};

} // namespace aleph0