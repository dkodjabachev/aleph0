#pragma once

#include "aleph0.h"
#include "Vector2d.h"

namespace aleph0
{

class Matrix2x2
{
public:
	///////////////////////////////////////////////////////////////////////////////
	Matrix2x2();

	///////////////////////////////////////////////////////////////////////////////
	Matrix2x2(const Matrix2x2& other);

	///////////////////////////////////////////////////////////////////////////////
	Matrix2x2(float a, float b, float c, float d);

public:
	///////////////////////////////////////////////////////////////////////////////
	Matrix2x2& SetZeroMatrix();

	///////////////////////////////////////////////////////////////////////////////
	Matrix2x2& SetIdentityMatrix();

	///////////////////////////////////////////////////////////////////////////////
	const float& operator()(const int row_index, const int col_index) const;

	///////////////////////////////////////////////////////////////////////////////
	float& operator()(const int row_index, const int col_index);

	///////////////////////////////////////////////////////////////////////////////
	const float& operator()(const int index) const;

	///////////////////////////////////////////////////////////////////////////////
	float& operator()(const int index);

	///////////////////////////////////////////////////////////////////////////////
	Matrix2x2& operator=(const Matrix2x2& other);

	///////////////////////////////////////////////////////////////////////////////
	Matrix2x2 operator+(const Matrix2x2& other) const;

	///////////////////////////////////////////////////////////////////////////////
	Matrix2x2 operator+=(const Matrix2x2& other);

	///////////////////////////////////////////////////////////////////////////////
	Matrix2x2 operator-(const Matrix2x2& other) const;

	///////////////////////////////////////////////////////////////////////////////
	Matrix2x2& operator-=(const Matrix2x2& other);

	///////////////////////////////////////////////////////////////////////////////
	Matrix2x2 operator*(const float scalar) const;

	///////////////////////////////////////////////////////////////////////////////
	Matrix2x2& operator*=(const float scalar);

	///////////////////////////////////////////////////////////////////////////////
	Matrix2x2 operator*(const Matrix2x2& other) const;

	///////////////////////////////////////////////////////////////////////////////
	Matrix2x2& operator*=(const Matrix2x2& other);

	///////////////////////////////////////////////////////////////////////////////
	Vector2d operator*(const Vector2d& vector);

	///////////////////////////////////////////////////////////////////////////////
	bool operator==(const Matrix2x2& other) const;

	///////////////////////////////////////////////////////////////////////////////
	bool operator!=(const Matrix2x2& other) const;

	///////////////////////////////////////////////////////////////////////////////
	bool IsApproximatelyEqual(const Matrix2x2& other, const float epsilon = aleph0::epsilon) const;

	///////////////////////////////////////////////////////////////////////////////
	static Matrix2x2 NaiveMatrixProduct(const Matrix2x2& A, const Matrix2x2& B);

	///////////////////////////////////////////////////////////////////////////////
	static Matrix2x2 UnrolledMatrixProduct(const Matrix2x2& A, const Matrix2x2& B);

	///////////////////////////////////////////////////////////////////////////////
	static Matrix2x2 StrassenMatrixProduct(const Matrix2x2& A, const Matrix2x2& B);

	///////////////////////////////////////////////////////////////////////////////
	float Trace() const;

	///////////////////////////////////////////////////////////////////////////////
	float Determinant() const;

	///////////////////////////////////////////////////////////////////////////////
	Matrix2x2& Transpose();

	///////////////////////////////////////////////////////////////////////////////
	Matrix2x2 Transposed() const;

	///////////////////////////////////////////////////////////////////////////////
	Matrix2x2& Invert();

	///////////////////////////////////////////////////////////////////////////////
	Matrix2x2 Inverse() const;

	///////////////////////////////////////////////////////////////////////////////
	std::string ToString() const;

private:
	///////////////////////////////////////////////////////////////////////////////
	const float& m(const int row_index, const int col_index) const;

	///////////////////////////////////////////////////////////////////////////////
	float& m(const int row_index, const int col_index);

private:
	///////////////////////////////////////////////////////////////////////////////
	union Data
	{
		Data()
		{
			memset(elements_, 0, 4 * sizeof(float));
		}

		// We can represent our 2x2 matrix in a number of ways:

		// 1) As structure of four separate float variables
		struct
		{
			float a_;
			float b_;
			float c_;
			float d_;
		};

		// 2) As an array of four floats.
		float elements_[4];

		// 3) As a 2x2 array of floats.
		float array_[2][2];

		// 4) Even as an array of two Vector2d objects.
		Vector2d rows_[2];
	};

	Data data_;
}; // class Matrix2x2

///////////////////////////////////////////////////////////////////////////////
Matrix2x2 operator*(const float scalar, const Matrix2x2& matrix);

} // namespace aleph0
